# Script de validation du repository GitHub
# Plugin PPG Sage 50 ERP

Write-Host "üîç Validation du Repository GitHub - Plugin PPG Sage 50 ERP" -ForegroundColor Green
Write-Host ""

$errors = @()
$warnings = @()

# V√©rifier la structure des fichiers
Write-Host "üìÅ V√©rification de la structure des fichiers..." -ForegroundColor Yellow

$requiredFiles = @(
    "README.md",
    "QUICK_START.md",
    "INSTALLATION.md",
    "CONTRIBUTING.md",
    "SECURITY.md",
    "CHANGELOG.md",
    "LICENSE",
    "install.bat",
    "build.bat",
    "PPGSage50Plugin.sln",
    "PPGSage50Plugin/PPGSage50Plugin.csproj",
    "PPGSage50Plugin/Program.cs",
    "PPGSage50Plugin/PPGSage50Plugin.cs",
    ".github/workflows/build.yml",
    ".github/workflows/release.yml",
    ".github/ISSUE_TEMPLATE/bug_report.md",
    ".github/ISSUE_TEMPLATE/feature_request.md",
    ".github/ISSUE_TEMPLATE/question.md",
    ".github/PULL_REQUEST_TEMPLATE.md",
    ".github/CODEOWNERS",
    ".github/dependabot.yml",
    ".gitignore"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file" -ForegroundColor Red
        $errors += "Fichier manquant: $file"
    }
}

# V√©rifier les mod√®les de donn√©es
Write-Host ""
Write-Host "üìä V√©rification des mod√®les de donn√©es..." -ForegroundColor Yellow

$modelFiles = @(
    "PPGSage50Plugin/Models/Customer.cs",
    "PPGSage50Plugin/Models/Product.cs",
    "PPGSage50Plugin/Models/Order.cs",
    "PPGSage50Plugin/Models/Invoice.cs",
    "PPGSage50Plugin/Models/DeliveryNote.cs",
    "PPGSage50Plugin/Models/Quotation.cs",
    "PPGSage50Plugin/Models/ApiResponse.cs"
)

foreach ($file in $modelFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file" -ForegroundColor Red
        $errors += "Mod√®le manquant: $file"
    }
}

# V√©rifier les services API
Write-Host ""
Write-Host "üîß V√©rification des services API..." -ForegroundColor Yellow

$serviceFiles = @(
    "PPGSage50Plugin/Services/AuthenticationService.cs",
    "PPGSage50Plugin/Services/BaseApiService.cs",
    "PPGSage50Plugin/Services/CustomerApiService.cs",
    "PPGSage50Plugin/Services/ProductApiService.cs",
    "PPGSage50Plugin/Services/OrderApiService.cs",
    "PPGSage50Plugin/Services/InvoiceApiService.cs",
    "PPGSage50Plugin/Services/DeliveryApiService.cs",
    "PPGSage50Plugin/Services/QuotationApiService.cs",
    "PPGSage50Plugin/Services/BackOrderApiService.cs",
    "PPGSage50Plugin/Services/PricingApiService.cs",
    "PPGSage50Plugin/Services/SynchronizationService.cs",
    "PPGSage50Plugin/Services/Logger.cs"
)

foreach ($file in $serviceFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file" -ForegroundColor Red
        $errors += "Service manquant: $file"
    }
}

# V√©rifier les interfaces utilisateur
Write-Host ""
Write-Host "üñ•Ô∏è V√©rification des interfaces utilisateur..." -ForegroundColor Yellow

$uiFiles = @(
    "PPGSage50Plugin/UI/MainForm.cs",
    "PPGSage50Plugin/UI/OrderForm.cs"
)

foreach ($file in $uiFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file" -ForegroundColor Red
        $errors += "Interface manquante: $file"
    }
}

# V√©rifier la configuration
Write-Host ""
Write-Host "‚öôÔ∏è V√©rification de la configuration..." -ForegroundColor Yellow

$configFiles = @(
    "PPGSage50Plugin/App.config",
    "PPGSage50Plugin/log4net.config",
    "PPGSage50Plugin/Configuration/AppConfig.cs",
    "packages.config"
)

foreach ($file in $configFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file" -ForegroundColor Red
        $errors += "Configuration manquante: $file"
    }
}

# V√©rifier les scripts
Write-Host ""
Write-Host "üìú V√©rification des scripts..." -ForegroundColor Yellow

$scriptFiles = @(
    "install.bat",
    "build.bat",
    "create-repository.ps1"
)

foreach ($file in $scriptFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file" -ForegroundColor Red
        $errors += "Script manquant: $file"
    }
}

# V√©rifier la documentation
Write-Host ""
Write-Host "üìö V√©rification de la documentation..." -ForegroundColor Yellow

$docFiles = @(
    "README.md",
    "QUICK_START.md",
    "INSTALLATION.md",
    "CONTRIBUTING.md",
    "SECURITY.md",
    "CHANGELOG.md",
    "create-github-repo.md"
)

foreach ($file in $docFiles) {
    if (Test-Path $file) {
        $content = Get-Content $file -Raw
        if ($content.Length -gt 100) {
            Write-Host "   ‚úÖ $file (${content.Length} caract√®res)" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è $file (trop court: ${content.Length} caract√®res)" -ForegroundColor Yellow
            $warnings += "Documentation trop courte: $file"
        }
    } else {
        Write-Host "   ‚ùå $file" -ForegroundColor Red
        $errors += "Documentation manquante: $file"
    }
}

# V√©rifier les workflows GitHub
Write-Host ""
Write-Host "üîÑ V√©rification des workflows GitHub..." -ForegroundColor Yellow

$workflowFiles = @(
    ".github/workflows/build.yml",
    ".github/workflows/release.yml"
)

foreach ($file in $workflowFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file" -ForegroundColor Red
        $errors += "Workflow manquant: $file"
    }
}

# V√©rifier les templates
Write-Host ""
Write-Host "üìã V√©rification des templates..." -ForegroundColor Yellow

$templateFiles = @(
    ".github/ISSUE_TEMPLATE/bug_report.md",
    ".github/ISSUE_TEMPLATE/feature_request.md",
    ".github/ISSUE_TEMPLATE/question.md",
    ".github/PULL_REQUEST_TEMPLATE.md"
)

foreach ($file in $templateFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file" -ForegroundColor Red
        $errors += "Template manquant: $file"
    }
}

# R√©sum√©
Write-Host ""
Write-Host "üìä R√©sum√© de la validation :" -ForegroundColor Yellow

if ($errors.Count -eq 0) {
    Write-Host "‚úÖ Aucune erreur critique d√©tect√©e !" -ForegroundColor Green
} else {
    Write-Host "‚ùå $($errors.Count) erreur(s) critique(s) d√©tect√©e(s) :" -ForegroundColor Red
    foreach ($error in $errors) {
        Write-Host "   - $error" -ForegroundColor Red
    }
}

if ($warnings.Count -gt 0) {
    Write-Host "‚ö†Ô∏è $($warnings.Count) avertissement(s) :" -ForegroundColor Yellow
    foreach ($warning in $warnings) {
        Write-Host "   - $warning" -ForegroundColor Yellow
    }
}

# Recommandations
Write-Host ""
Write-Host "üí° Recommandations :" -ForegroundColor Cyan
Write-Host "   1. Ex√©cuter 'build.bat' pour tester la compilation"
Write-Host "   2. V√©rifier que tous les fichiers sont dans le bon r√©pertoire"
Write-Host "   3. Tester l'installation avec 'install.bat'"
Write-Host "   4. Cr√©er le repository GitHub avec 'create-repository.ps1'"
Write-Host "   5. Configurer les param√®tres selon 'create-github-repo.md'"

Write-Host ""
if ($errors.Count -eq 0) {
    Write-Host "üéâ Repository pret pour GitHub !" -ForegroundColor Green
} else {
    Write-Host "üîß Veuillez corriger les erreurs avant de creer le repository" -ForegroundColor Red
}
